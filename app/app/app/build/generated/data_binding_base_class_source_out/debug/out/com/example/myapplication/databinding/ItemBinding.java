// Generated by view binder compiler. Do not edit!
package com.example.myapplication.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.myapplication.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final TextView itemCategory;

  @NonNull
  public final ImageView itemImg;

  @NonNull
  public final RelativeLayout itemInfo;

  @NonNull
  public final TextView itemName;

  @NonNull
  public final TextView itemPrice;

  private ItemBinding(@NonNull RelativeLayout rootView, @NonNull TextView itemCategory,
      @NonNull ImageView itemImg, @NonNull RelativeLayout itemInfo, @NonNull TextView itemName,
      @NonNull TextView itemPrice) {
    this.rootView = rootView;
    this.itemCategory = itemCategory;
    this.itemImg = itemImg;
    this.itemInfo = itemInfo;
    this.itemName = itemName;
    this.itemPrice = itemPrice;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemBinding inflate(@NonNull LayoutInflater inflater, @Nullable ViewGroup parent,
      boolean attachToParent) {
    View root = inflater.inflate(R.layout.item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.item_category;
      TextView itemCategory = ViewBindings.findChildViewById(rootView, id);
      if (itemCategory == null) {
        break missingId;
      }

      id = R.id.item_img;
      ImageView itemImg = ViewBindings.findChildViewById(rootView, id);
      if (itemImg == null) {
        break missingId;
      }

      id = R.id.item_info;
      RelativeLayout itemInfo = ViewBindings.findChildViewById(rootView, id);
      if (itemInfo == null) {
        break missingId;
      }

      id = R.id.item_name;
      TextView itemName = ViewBindings.findChildViewById(rootView, id);
      if (itemName == null) {
        break missingId;
      }

      id = R.id.item_price;
      TextView itemPrice = ViewBindings.findChildViewById(rootView, id);
      if (itemPrice == null) {
        break missingId;
      }

      return new ItemBinding((RelativeLayout) rootView, itemCategory, itemImg, itemInfo, itemName,
          itemPrice);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
